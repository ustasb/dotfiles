# thyme: console Pomodoro timer
# https://github.com/hughbien/thyme

set :timer, 25*60 # 25 minute pomodoros
set :timer_break, 5*60 # 5 minute breaks

# tmux
set :tmux, true
set :tmux_theme, 'â”‚ #[fg=%s]%s '
set :interval, 1 # Refresh timer every 1 second.
set :warning, 5*60 # Show warning color at <5 minutes.
set :warning_color, 'red,bold'
set :break_color, 'blue'

# Add `-m --minutes num` option which allows on-the-fly timer.
option :m, 'minutes num', 'run with custom minutes' do |num|
  set :timer, num.to_i * 60
  @run = true
end

before do
  `terminal-notifier -title "Pomodoro Timer" -message "Timer started!"`
end

after do |seconds_left|
  `terminal-notifier -title "Pomodoro Timer" -message "Time's up!" -sound Glass` if seconds_left == 0
end

# === Plugins ===

require 'json'
require 'logger'

LOG_PATH = File.join(ENV['HOME'], '.thyme.log')

class ThymeLogger
  def initialize(thyme, log_path)
    @thyme = thyme
    @log_path = log_path
    @task_desc = nil

    __self = self

    thyme.option(:t, 'task desc', 'task description') do |task_desc|
      __self.instance_variable_set(:@task_desc, task_desc)
      @run = true
    end

    thyme.option(:l, 'log', 'open task log in $EDITOR') do
      system(ENV['EDITOR'], LOG_PATH)
    end
  end

  def before_all
    if File.exists?(@log_path)
      @logger = Logger.new(File.open(@log_path, 'a'))
    else
      puts "Can't find log file: #{@log_path}\nPlease create it. Exiting"
      exit
    end
  end

  def before
    log_info('timer start', @thyme.timer)
  end

  def after(seconds_left)
    log_info('timer end', seconds_left)
  end

  def after_all
    @logger.close
  end

  private

  def log_info(status, seconds_left)
    @logger.info({ task_desc: @task_desc, status: status, seconds_left: seconds_left }.to_json)
  end
end

use ThymeLogger, LOG_PATH
